on:
  workflow_dispatch:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10

name: Publish Release

jobs:
  insiders-build:
    strategy:
      matrix:
        os: [windows, macos, ubuntu]
        include:
          - os: windows
            build: npx caxa -i . --output "Fosscord-server-windows-${{ github.sha }}.exe" -- "{{caxa}}/node_modules/.bin/node" "{{caxa}}/dist/start.js"
            artifact: Fosscord-server-windows-${{ github.sha }}.exe
          - os: macos
            build: |
              npx caxa -i . --output "Fosscord.app" -- "{{caxa}}/node_modules/.bin/node" "{{caxa}}/dist/start.js"
              tar -czf "Fosscord-server-macos-${{ github.sha }}.app.tgz" "Fosscord.app"
            artifact: Fosscord-server-macos-${{ github.sha }}.app.tgz
          - os: ubuntu
            build: |
              npx caxa -i . --output "fosscord" -- "{{caxa}}/node_modules/.bin/node" "{{caxa}}/dist/start.js"
              tar -czf "fosscord-server-linux-${{ github.sha }}.tgz" "fosscord"
            artifact: fosscord-server-linux-${{ github.sha }}.tgz
    runs-on: ${{ matrix.os }}-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 14
      - run: npm install
      - run: npm run build
      - run: ${{ matrix.build }}
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.artifact }}
          path: ${{ matrix.artifact }}

  release:
    needs: [insiders-build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: fosscord-server-windows-${{ github.sha }}.exe
      - uses: actions/download-artifact@v2
        with:
          name: fosscord-server-macos-${{ github.sha }}.app.tgz
      - uses: actions/download-artifact@v2
        with:
          name: fosscord-server-linux-${{ github.sha }}.tgz
      - run: echo "::set-output name=tag::${GITHUB_REF#refs/tags/}"
        id: tag
      - uses: actions/create-release@v1
        id: create-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          release_name: Release ${{ steps.tag.outputs.tag }}
      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: fosscord-server-windows-${{ github.sha }}.exe
          asset_name: fosscord-server-windows-${{ steps.tag.outputs.tag }}.exe
          asset_content_type: application/vnd.microsoft.portable-executable
      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: fosscord-server-macos-${{ github.sha }}.app.tgz
          asset_name: fosscord-server-macos-${{ steps.tag.outputs.tag }}.app.tgz
          asset_content_type: application/gzip
      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: fosscord-server-linux-${{ github.sha }}.tgz
          asset_name: fosscord-server-linux-${{ steps.tag.outputs.tag }}.tgz
          asset_content_type: application/gzip
